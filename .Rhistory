# Set the working directory
setwd("D:\Sri_DataScience_Practice\Big Mart Sales - Linear Regression Practice")
# Set the working directory
setwd("D:/Sri_DataScience_Practice/Big Mart Sales - Linear Regression Practice")
train = read.csv("Train.csv")
test = read.csv("Test.csv")
# Verify the train data set
head(train)
# Verify the train data set
summary(train)
# Item_Fat content column has different descriptions. Regularizing the same
distinct(train$Item_Fat_Content)
install.packages("dplyr")
library("dplyr")
# Item_Fat content column has different descriptions. Regularizing the same
distinct(train$Item_Fat_Content)
# Verify the train data set
str(train)
# Item_Fat content column has different descriptions. Regularizing the same
unique(train$Item_Fat_Content)
train$Item_Fat_Content=ifelse(train$Item_Fat_Content=="low fat",'Low Fat',train$Item_Fat_Content)
# Item_Fat content column has different descriptions. Regularizing the same
unique(train$Item_Fat_Content)
train = read.csv("Train.csv")
# Item_Fat content column has different descriptions. Regularizing the same
unique(train$Item_Fat_Content)
train$Item_Fat_Content=ifelse(train$Item_Fat_Content=="LF"||train$Item_Fat_Content=="low fat"||train$Item_Fat_Content=="Low Fat",1,2)
# Item_Fat content column has different descriptions. Regularizing the same
unique(train$Item_Fat_Content)
train = read.csv("Train.csv")
NROW(train[train$Item_Fat_Content=="LF"])
NROW(train[train$Item_Fat_Content=="LF",])
NROW(train[train$Item_Fat_Content=="Low Fat",])
NROW(train[train$Item_Fat_Content=="low fat",])
NROW(train[train$Item_Fat_Content=="low fat"||train$Item_Fat_Content=="Low Fat"||train$Item_Fat_Content=="LF",])
NROW(train[train$Item_Fat_Content=="low fat"|train$Item_Fat_Content=="Low Fat"|train$Item_Fat_Content=="LF",])
train = read.csv("Train.csv")
# Item_Fat content column has different descriptions. Regularizing the same
unique(train$Item_Fat_Content)
NROW(train[train$Item_Fat_Content=="low fat"|train$Item_Fat_Content=="Low Fat"|train$Item_Fat_Content=="LF",])
train$Item_Fat_Content=ifelse(train$Item_Fat_Content=="LF"|train$Item_Fat_Content=="low fat"|train$Item_Fat_Content=="Low Fat",1,2)
# Item_Fat content column has different descriptions. Regularizing the same
unique(train$Item_Fat_Content)
# Check for any missing values
NROW(is.na(train[train$Item_Identifier]))
# Check for any missing values
is.na(train$Item_Identifier)
# Check for any missing values
NROW(is.na(train$Item_Identifier))
# Check for any missing values
NROW(is.na(train$Item_Identifier)==TRUE)
# Check for any missing values
NROW(train[is.na(train$Item_Identifier),])
NROW(train[is.na(train$Item_Weight),])
NROW(train[is.na(train$Item_Fat_Content),])
NROW(train[is.na(train$Item_Visibility),])
NROW(train[is.na(train$Item_Type),])
NROW(train[is.na(train$Item_MRP),])
NROW(train[is.na(train$Outlet_Identifier),])
NROW(train[is.na(train$Outlet_Establishment_Year),])
NROW(train[is.na(train$Outlet_Size),])
NROW(train[trimws(train$Outlet_Size)=="",])
NROW(train[trimws(train$Item_Type)=="",]) #
NROW(train[trimws(train$Outlet_Location_Type)=="",])
# Create seperate data set with Item type, Fat content & weight distinct list
unique.data.frame(train$Item_Weight,train$Item_Type,train$Item_Fat_Content)
# Create seperate data set with Item type, Fat content & weight distinct list
unique.data.frame(train$Item_Weight,train$Item_Type,train$Item_Fat_Content, incomparables = FALSE)
boxplot(train$Item_Weight)
hist(train$Item_Weight)
boxplot(train$Item_Visibility)
hist(train$Item_Visibility)
boxplot(train$Item_MRP)
hist(train$Item_MRP)
boxplot(train$Item_Outlet_Sales)
hist(train$Item_Outlet_Sales)
# Create seperate data set with Item type, Fat content & weight distinct list
lookup_list1 = cbind(unique(train$Item_Weight),unique(train$Item_Fat_Content),unique(train$Item_Type))
View(lookup_list1)
colnames(lookup_list1) = c("Item_Weight","Item_Fat_Content","Item_Type")
View(lookup_list1)
str(lookup_list1)
# Create seperate data set with Item type, Fat content & weight distinct list
lookup_list1 = as.data.frame(cbind(unique(train$Item_Weight),unique(train$Item_Fat_Content),unique(train$Item_Type)))
str(lookup_list1)
colnames(lookup_list1) = c("Item_Weight","Item_Fat_Content","Item_Type")
str(lookup_list1)
NROW(lookup_list1[is.na(lookup_list1),])
lookup_list=lookup_list1[is.na(lookup_list1$Item_Weight)==FALSE,]
View(lookup_list)
NROW(is.na(lookup_list[lookup_list$Item_Weight,])
NROW(is.na(lookup_list[lookup_list$Item_Weight,]))
NROW(is.na(lookup_list[lookup_list$Item_Weight,]))
remove(lookup_list1[is.na(lookup_list1$Item_Weight),])
lookup=as.data.frame(complete.cases(lookup_list1))
lookup_list=as.data.frame(complete.cases(lookup_list1))
remove(lookup)
View(lookup_list)
lookup_list=as.data.frame(complete.cases(lookup_list1),)
View(lookup_list)
remove(lookup_list1)
lookup_list=lookup_list1[complete.cases(lookup_list1),]
# Create seperate data set with Item type, Fat content & weight distinct list
lookup_list1 = as.data.frame(cbind(unique(train$Item_Weight),unique(train$Item_Fat_Content),unique(train$Item_Type)))
colnames(lookup_list1) = c("Item_Weight","Item_Fat_Content","Item_Type")
lookup_list=lookup_list1[complete.cases(lookup_list1),]
View(lookup_list)
NROW(lookup_list[is.na(lookup_list$Item_Weight),])
NROW(lookup_list)
# Update missing weight values in train data using look up list
ind = match(train$Item_Type,lookup_list$Item_Type)
View(ind)
# Create seperate data set with Item type, Fat content & weight distinct list
lookup_list1 = as.data.frame(cbind(unique(train$Item_Weight),unique(train$Item_Fat_Content),unique(train$Item_Identifier)))
remove(lookup_list1)
# Create seperate data set with Item type, Fat content & weight distinct list
lookup_list1 = as.data.frame(cbind(unique(train$Item_Weight),unique(train$Item_Fat_Content),unique(train$Item_Identifier)))
View(lookup_list)
distinct(train$Item_Identifier,train$Item_Weight,train$Item_Fat_Content)
str(train)
train$item_iden_fac = as.factor(train$Item_Identifier)
View(train)
remove(train$item_iden_fac)
rm(train$item_iden_fac)
remove(train)
train = read.csv("Train.csv")
train$Item_Fat_Content=ifelse(train$Item_Fat_Content=="LF"|train$Item_Fat_Content=="low fat"|train$Item_Fat_Content=="Low Fat",1,2)
levels(unique(train$Item_Identifier, train$Item_Fat_Content))
levels(unique(train$Item_Identifier))
levels(unique(train$Item_Identifier),unique(train$Item_Weight))
unique(train$Item_Identifier)
unique(train$Item_Fat_Content)
str(train)
remove(lookup_list)
remove(lookup_list1)
look_up = as.data.frame(cbind(unique(train$Item_Identifier),unique(train$Item_Fat_Content), unique(train$Item_Weight)))
look_up = unique(train[is.na(train$Item_Weight)==FALSE,colnames(train) %in% c("Item_Identifier","Item_Weight","Item_Fat_Content")])
View(look_up)
library("DMwR")
train = knnImputation(train,!names(train) %in% ("Item_Outlet_Sales","Outlet_Size"),meth = 'median', distData = look_up)
train = knnImputation(train[,!names(train) %in% ("Item_Outlet_Sales","Outlet_Size")],meth = 'median', distData = look_up)
train = knnImputation(train[,!names(train) %in% c("Item_Outlet_Sales","Outlet_Size")], meth = 'median', distData = look_up, scale = FALSE)
train = knnImputation(train[,names(train) %in% c("Item_Identifier","Item_Weight","Item_Fat_Content")], meth = 'median', distData = look_up, scale = FALSE)
NROW(train[is.na(train$Item_Weight,)])
NROW(train[is.na(train$Item_Weight),])
write.csv(train, file = "train_imputed.csv")
train = knnImputation(train[,names(train) %in% c("Item_Identifier","Item_Weight","Item_Fat_Content")], meth = 'median', distData = look_up, scale = FALSE, k=10)
train = read.csv("Train.csv")
train = knnImputation(train[,names(train) %in% c("Item_Identifier","Item_Weight","Item_Fat_Content")], meth = 'mode', distData = look_up, scale = FALSE, k=10)
train$Item_Fat_Content=ifelse(train$Item_Fat_Content=="LF"|train$Item_Fat_Content=="low fat"|train$Item_Fat_Content=="Low Fat",1,2)
train = knnImputation(train[,names(train) %in% c("Item_Identifier","Item_Weight","Item_Fat_Content")], meth = 'mode', distData = look_up, scale = FALSE, k=10)
write.csv(train, file = "train_imputed.csv")
train = read.csv("Train.csv")
train$Item_Fat_Content=ifelse(train$Item_Fat_Content=="LF"|train$Item_Fat_Content=="low fat"|train$Item_Fat_Content=="Low Fat",1,2)
train = knnImputation(train[,names(train) %in% c("Item_Identifier","Item_Weight","Item_Fat_Content")], meth = 'mode',  scale = FALSE, k=10)
write.csv(train, file = "train_imputed.csv")
train = read.csv("Train.csv")
train$Item_Fat_Content=ifelse(train$Item_Fat_Content=="LF"|train$Item_Fat_Content=="low fat"|train$Item_Fat_Content=="Low Fat",1,2)
cols = c("Item_Identifier","Item_Fat_Content")
train[is.na(train$Item_Weight,train$Item_Weight:=train[.BY,mode(train$Item_Weight,na.rm = TRUE), by=c(cols)])]
train(is.na(train$Item_Weight), train$Item_Weight:= train[.BY, mode(train$Item_Weight,na.rm = TRUE),by = c(cols)])
require(data.table)
train(is.na(train$Item_Weight), train$Item_Weight:= train[.BY, mode(train$Item_Weight,na.rm = TRUE),by = c(cols)])
train[,train$Item_Identifier==train$Item_Identifier[1]]
data_A = train[which(train$Item_Identifier==train$Item_Identifier[1])& train$Item_Fat_Content==train$Item_Fat_Content[1], names(train) %in% c("Item_Identifier","Item_Fat_Content","Item_Weight")]
View(data_A)
mode(data_A$Item_Weight,na.rm=FALSE)
mode(data_A$Item_Weight,na.rm=TRUE)
mode(data_A$Item_Weight,na.rm=TRUE)
mode(data_A$Item_Weight)
mode(data_A$Item_Weight, na.rm = TRUE)
str(data_A)
data_A = train[which(train$Item_Identifier==train$Item_Identifier[1])& train$Item_Fat_Content==train$Item_Fat_Content[1] & is.na(train$Item_Weight)== FALSE, names(train) %in% c("Item_Identifier","Item_Fat_Content","Item_Weight")]
View(data_A)
mean(data_A$Item_Weight, na.rm = TRUE)
mode(data_A$Item_Weight)
Unique(data_A$Item_Weight)
unique(data_A$Item_Weight)
View(data_A)
train$Item_Identifier[1]
train$Item_Identifier[1,]
train$Item_Identifier[1]
train$Item_Fat_Content[1]
length(train)
NROW(train)
for (i in 1:NROW(train)){
if(is.na(train[,train$Item_Weight][i])){
data_A = train[which(train$Item_Identifier==train$Item_Identifier[i])& train$Item_Fat_Content==train$Item_Fat_Content[i], names(train) %in% c("Item_Identifier","Item_Fat_Content","Item_Weight")]
train$Item_Weight[i]=median(data_A$Item_Weight, na.rm = TRUE)
remove(data_A)
}
}
remove(data_A)
for (i in 1:NROW(train)){
if(is.na(train[,train$Item_Weight][i])){
data_A = train[which(train$Item_Identifier==train$Item_Identifier[i]& train$Item_Fat_Content==train$Item_Fat_Content[i]), names(train) %in% c("Item_Identifier","Item_Fat_Content","Item_Weight")]
train$Item_Weight[i]=median(data_A$Item_Weight, na.rm = TRUE)
remove(data_A)
}
}
for (i in 1:NROW(train)){
if(is.na(train[,train$Item_Weight][i])){
data_A = train[which(train$Item_Identifier==train$Item_Identifier[i]& train$Item_Fat_Content==train$Item_Fat_Content[i]), names(train) %in% c("Item_Identifier","Item_Fat_Content","Item_Weight")]
train[i,"Item_Weight"]=median(data_A$Item_Weight, na.rm = TRUE)
remove(data_A)
}
}
str(train)
for (i in 1:NROW(train)){
if(is.na(train[,"Item_Weight"][i])){
data_A = train[which(train$Item_Identifier==train$Item_Identifier[i]& train$Item_Fat_Content==train$Item_Fat_Content[i]), names(train) %in% c("Item_Identifier","Item_Fat_Content","Item_Weight")]
train[i,"Item_Weight"]=median(data_A$Item_Weight, na.rm = TRUE)
remove(data_A)
}
}
NROW(is.na(train$Item_Weight))
View(train)
write.csv(train, file = "Imputed_train.csv")
for (i in 1:NROW(train)){
if(is.na(train[,"Item_Weight"][i])){
data_A = train[which(train$Item_Type==train$Item_Type[i]), names(train) %in% c("Item_Type","Item_Weight")]
train[i,"Item_Weight"]=median(data_A$Item_Weight, na.rm = TRUE)
remove(data_A)
}
}
for (i in 1:NROW(train)){
if(trimws(train$Outlet_Size[i])==""){
data_B = train[which(train$Outlet_Location_Type==train$Outlet_Location_Type[i] & train$Outlet_Type==train$Outlet_Type[i] & trimws(train$Outlet_Size[i]!= "")), names(train) %in% c("Outlet_Location_Type","Outlet_Type","Outlet_Size")]
train[i,"Outlet_Size"]=mode(data_B$Outlet_Size)
remove(data_B)
}
}
str(train)
train[,train$Outlet_Size]==ifelse(train$Outlet_Location_Type=="Tier 3"&train$Outlet_Type="Grocery Store"& train$Outlet_Size=="","Small", train$Outlet_Size)
train[,train$Outlet_Size]==ifelse(train$Outlet_Location_Type=="Tier 3"&train$Outlet_Type=="Grocery Store"& train$Outlet_Size=="","Small", train$Outlet_Size)
write.csv(train,file = "imputed.csv")
train[,train$Outlet_Size]==ifelse(train$Outlet_Location_Type=="Tier 3" & train$Outlet_Type=="Grocery Store" & train$Outlet_Size=="","Small", train$Outlet_Size)
write.csv(train,file = "imputed.csv")
str(train)
train$Outlet_Type=ifelse(train$Outlet_Type=="Tier 1",1,ifelse(train$Outlet_Type=="Tier 2",2,3))
train = read.csv("Train.csv")
train$Item_Fat_Content=ifelse(train$Item_Fat_Content=="LF"|train$Item_Fat_Content=="low fat"|train$Item_Fat_Content=="Low Fat",1,2)
for (i in 1:NROW(train)){
if(is.na(train[,"Item_Weight"][i])){
data_A = train[which(train$Item_Identifier==train$Item_Identifier[i]& train$Item_Fat_Content==train$Item_Fat_Content[i]), names(train) %in% c("Item_Identifier","Item_Fat_Content","Item_Weight")]
train[i,"Item_Weight"]=median(data_A$Item_Weight, na.rm = TRUE)
remove(data_A)
}
}
# Still there are 4 missing values. Replace with Item Type Median
for (i in 1:NROW(train)){
if(is.na(train[,"Item_Weight"][i])){
train[i,"Item_Weight"]=median(data_A$Item_Weight, na.rm = TRUE)
remove(data_A)
}
}
# Replace missing values for Outlet_Size using Outlet_Location_Type, Outlet_Type
train$Outlet_Type=ifelse(train$Outlet_Type=="Grocery Store",0,ifelse(train$Outlet_Type=="Supermarket Type1",1,ifelse(train$Outlet_Type=="Supermarket Type2",2,3)))
train$Outlet_Location_Type=ifelse(train$Outlet_Location_Type=="Tier 1",1,ifelse(train$Outlet_Type=="Tier 2",2,3))
str(train)
train$Outlet_Size=ifelse(train$Outlet_Type==0 & train$Outlet_Location_Type==3,"Small",train$Outlet_Size)
train$Outlet_Size=ifelse(train$Outlet_Type==1 & train$Outlet_Location_Type==2,"Small",train$Outlet_Size)
NROW(trimws(train$Outlet_Size=="")
NROW(trimws(train$Outlet_Size==""))
NROW(trimws(train$Outlet_Size==""))
write.csv(train, file = "Imputed.csv")
train = read.csv("Train.csv")
NROW(train[train$Item_Fat_Content=="low fat"|train$Item_Fat_Content=="Low Fat"|train$Item_Fat_Content=="LF",])
train$Item_Fat_Content=ifelse(train$Item_Fat_Content=="LF"|train$Item_Fat_Content=="low fat"|train$Item_Fat_Content=="Low Fat",1,2)
for (i in 1:NROW(train)){
if(is.na(train[,"Item_Weight"][i])){
data_A = train[which(train$Item_Identifier==train$Item_Identifier[i]& train$Item_Fat_Content==train$Item_Fat_Content[i]), names(train) %in% c("Item_Identifier","Item_Fat_Content","Item_Weight")]
train[i,"Item_Weight"]=median(data_A$Item_Weight, na.rm = TRUE)
remove(data_A)
}
}
# Still there are 4 missing values. Replace with Item Type Median
for (i in 1:NROW(train)){
if(is.na(train[,"Item_Weight"][i])){
train[i,"Item_Weight"]=median(data_A$Item_Weight, na.rm = TRUE)
remove(data_A)
}
}
